--- x.c
+++ x.c
@@ -105,6 +105,7 @@ typedef struct {
 	XSetWindowAttributes attrs;
 	int scr;
 	int isfixed; /* is fixed geometry? */
+	int depth; /* bit depth */
 	int l, t; /* left and top offset */
 	int gm; /* geometry mask */
 } XWindow;
@@ -243,6 +244,7 @@ static char *usedfont =3D NULL;
 static double usedfontsize =3D 0;
 static double defaultfontsize =3D 0;
 20
+static char *opt_alpha =3D NULL;
 static char *opt_class =3D NULL;
 static char **opt_cmd  =3D NULL;
 static char *opt_embed =3D NULL;
@@ -736,7 +738,7 @@ xresize(int col, int row)
 20
 	XFreePixmap(xw.dpy, xw.buf);
 	xw.buf =3D XCreatePixmap(xw.dpy, xw.win, win.w, win.h,
-			DefaultDepth(xw.dpy, xw.scr));
+			xw.depth);
 	XftDrawChange(xw.draw, xw.buf);
 	xclear(0, 0, win.w, win.h);
 20
@@ -796,6 +798,13 @@ xloadcols(void)
 			else
 				die("could not allocate color %d\n", i);
 		}
+
+	/* set alpha value of bg color */
+	if (opt_alpha)
+		alpha =3D strtof(opt_alpha, NULL);
+	dc.col[defaultbg].color.alpha =3D (unsigned short)(0xffff * alpha);
+	dc.col[defaultbg].pixel &amp;=3D 0x00FFFFFF;
+	dc.col[defaultbg].pixel |=3D (unsigned char)(0xff * alpha) &lt;&lt; 24;
 	loaded =3D 1;
 }
 20
@@ -1118,11 +1127,23 @@ xinit(int cols, int rows)
 	Window parent;
 	pid_t thispid =3D getpid();
 	XColor xmousefg, xmousebg;
+	XWindowAttributes attr;
+	XVisualInfo vis;
 20
 	if (!(xw.dpy =3D XOpenDisplay(NULL)))
 		die("can't open display\n");
 	xw.scr =3D XDefaultScreen(xw.dpy);
-	xw.vis =3D XDefaultVisual(xw.dpy, xw.scr);
+
+	if (!(opt_embed &amp;&amp; (parent =3D strtol(opt_embed, NULL, 0)))) {
+		parent =3D XRootWindow(xw.dpy, xw.scr);
+		xw.depth =3D 32;
+	} else {
+		XGetWindowAttributes(xw.dpy, parent, &amp;attr);
+		xw.depth =3D attr.depth;
+	}
+
+	XMatchVisualInfo(xw.dpy, xw.scr, xw.depth, TrueColor, &amp;vis);
+	xw.vis =3D vis.visual;
 20
 	/* font */
 	if (!FcInit())
@@ -1132,7 +1153,7 @@ xinit(int cols, int rows)
 	xloadfonts(usedfont, 0);
 20
 	/* colors */
-	xw.cmap =3D XDefaultColormap(xw.dpy, xw.scr);
+	xw.cmap =3D XCreateColormap(xw.dpy, parent, xw.vis, None);
 	xloadcols();
 20
 	/* adjust fixed window geometry */
@@ -1152,19 +1173,15 @@ xinit(int cols, int rows)
 		| ButtonMotionMask | ButtonPressMask | ButtonReleaseMask;
 	xw.attrs.colormap =3D xw.cmap;
 20
-	if (!(opt_embed &amp;&amp; (parent =3D strtol(opt_embed, NULL, 0))))
-		parent =3D XRootWindow(xw.dpy, xw.scr);
 	xw.win =3D XCreateWindow(xw.dpy, parent, xw.l, xw.t,
-			win.w, win.h, 0, XDefaultDepth(xw.dpy, xw.scr), InputOutput,
+			win.w, win.h, 0, xw.depth, InputOutput,
 			xw.vis, CWBackPixel | CWBorderPixel | CWBitGravity
 			| CWEventMask | CWColormap, &amp;xw.attrs);
 20
 	memset(&amp;gcvalues, 0, sizeof(gcvalues));
 	gcvalues.graphics_exposures =3D False;
-	dc.gc =3D XCreateGC(xw.dpy, parent, GCGraphicsExposures,
-			&amp;gcvalues);
-	xw.buf =3D XCreatePixmap(xw.dpy, xw.win, win.w, win.h,
-			DefaultDepth(xw.dpy, xw.scr));
+	xw.buf =3D XCreatePixmap(xw.dpy, xw.win, win.w, win.h, xw.depth);
+	dc.gc =3D XCreateGC(xw.dpy, xw.buf, GCGraphicsExposures, &amp;gcvalues);
 	XSetForeground(xw.dpy, dc.gc, dc.col[defaultbg].pixel);
 	XFillRectangle(xw.dpy, xw.buf, dc.gc, 0, 0, win.w, win.h);
 20
@@ -2019,6 +2036,9 @@ main(int argc, char *argv[])
 	case 'a':
 		allowaltscreen =3D 0;
 		break;
+	case 'A':
+		opt_alpha =3D EARGF(usage());
+		break;
 	case 'c':
 		opt_class =3D EARGF(usage());
 		break;
